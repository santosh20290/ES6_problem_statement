
Map

Exercize 1:
	Plucking Values
	Using map, create a new array that contains the 'height' property of each object.  Assign this new array to the variable 'heights'.  Don't forget to use the 'return' keyword in the function!

	var images = [
  		{ height: '34px', width: '39px' },
  		{ height: '54px', width: '19px' },
  		{ height: '83px', width: '75px' },
	];

	var heights;

Exercize 2:
	Calculating Values with Map
	Using map, create a new array that contains the distance / time value from each trip.  In other words, the new array should contain the (distance / time) value.  Assign the result to the variable 'speeds'.

	var trips = [
	  { distance: 34, time: 10 },
	  { distance: 90, time: 50 },
	  { distance: 59, time: 25 }
	];

	var speeds;

Exercize 3:

	Really Hard - Implementing 'Pluck'
	Implement a 'pluck' function.  Pluck should accept an array and a string representing a property name and return an  array containing that property from each object.

	Example: 
		var paints = [ { color: 'red' }, { color: 'blue' }, { color: 'yellow' }];
		pluck(paints, 'color'); // returns ['red', 'yellow', 'blue'];


Filter

Exercize 1:
	Filter the array of numbers using the filter helper, creating a new array that only contains numbers greater than 50.  Assign this new array to a variable called 'filteredNumbers'.  Don't forget to use the 'return' keyword in the function!

	var numbers = [15, 25, 35, 45, 55, 65, 75, 85, 95];

	var filteredNumbers;

Exercise 2:
	Handling Permissions with Filter
	Filter the array of users, only returning users who have admin level access.  Assign the result to the variable 'filteredUsers'. Don't forget to use the 'return' keyword in the function!

	var users = [
		 { id: 1, admin: true },  
		 { id: 2, admin: false },
		 { id: 3, admin: false },
		 { id: 4, admin: false },
		 { id: 5, admin: true },
		];

	var filteredUsers;

Exercize 3:
	Challenging!  Implementing 'reject'.
	This is a hard one!  Create a function called 'reject'.  Reject should work in the opposite way of 'filter' - if a function returns 'true', the item should *not* be included in the new array.  Hint: you can reuse filter.
	var numbers = [10, 20, 30];
	var lessThanFifteen = reject(numbers, function(number){
		return number > 15;});
	lessThanFifteen // [ 10 ];